# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      #backend: ${{ steps.filter.outputs.backend }}
      #frontend: ${{ steps.filter.outputs.frontend }}
      packages: ${{ steps.filter.outputs.changes }}
    steps:
    # For pull requests it's not necessary to checkout the code
          # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          all: '**'
          backend: 
            - 'backend/**'
            - 'lib/**'
          frontend: 
            - 'frontend/**'
            - 'lib/**'

  build:
    needs: changes
    strategy:
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files
        # e.g. ['package1', 'package2'] if both package folders contains changes
        package: ${{ fromJSON(needs.changes.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - if: |
          ${{ matrix.package != 'all' }} &&
          github.event_name != 'pull_request'
        name: Read yaml file
        id: yaml-output
        uses: pietrobolcato/action-read-yaml@1.1.0
        with:
          config: ${{ github.workspace }}/${{ matrix.package }}.yaml
      - if: |
          ${{ matrix.package != 'backend' }} &&
          github.event_name != 'pull_request'
        name: Run a one-line script for Package
        run: |
          echo Hello World ${{ matrix.package }}
          ls -al
          echo Dockerfile ${{ steps.yaml-output.outputs['dockerfile'] }}
          echo backend
      - if: |
          ${{ matrix.package != 'frontend' }} &&
          github.event_name != 'pull_request'
        name: Run a one-line script for Package
        run: |
          echo Hello World ${{ matrix.package }}
          ls -al
          echo Dockerfile ${{ steps.yaml-output.outputs['dockerfile'] }}
          echo frontend


  # This workflow contains a single job called "build"
  # backend:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: ${{ needs.changes.outputs.backend == 'true' }}
  #   steps:
  #     #- uses: actions/checkout@v3
  #     - name: Run a one-line script for Backend
  #       run: echo Hello, world!

  # frontend:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: ${{ needs.changes.outputs.frontend == 'true' }}
  #   steps:
  #     #- uses: actions/checkout@v3
  #     - name: Run a multi-line script for Frontend
  #       run: |
  #         echo Add other actions to build,
  #         echo test, and deploy your project.
